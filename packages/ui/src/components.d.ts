/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CarouselElement, QuickReply, QuickReplyMessage } from "@rasahq/chat-widget-sdk";
import { SenderType } from "@rasahq/chat-widget-sdk/dist/types/common.types";
export { CarouselElement, QuickReply, QuickReplyMessage } from "@rasahq/chat-widget-sdk";
export { SenderType } from "@rasahq/chat-widget-sdk/dist/types/common.types";
export namespace Components {
    interface ChatMessage {
        /**
          * Show sender icon
         */
        "hideSenderIcon": boolean;
        /**
          * Who sent the message
         */
        "sender": 'user' | 'bot';
        /**
          * Show message timestamp
         */
        "showTimestamp": boolean;
        /**
          * Message timestamp
         */
        "timestamp": Date;
    }
    interface ErrorToast {
    }
    interface GlobalErrorHandler {
    }
    interface RasaAccordion {
        /**
          * Represents the label property of an Accordion component. The label serves as the title or heading for accordion.
         */
        "label": string;
    }
    interface RasaButton {
        /**
          * Is button selected as option
         */
        "isSelected": boolean;
        /**
          * Additional value that is passed at button click
         */
        "reply": string;
    }
    interface RasaCarousel {
        /**
          * List of carousel elements
         */
        "elements": CarouselElement[];
    }
    interface RasaChatInput {
        /**
          * Input value
         */
        "initialValue"?: string;
    }
    interface RasaChatbotWidget {
        /**
          * User authentication token
         */
        "authenticationToken": string;
        /**
          * If set to True, it will open the chat, triggering the 'initialPayload' immediately if set.
         */
        "autoOpen": boolean;
        /**
          * Static icon for the chatbot
         */
        "botIcon": string;
        /**
          * Indicates if a message timestamp should be displayed
         */
        "displayTimestamp": boolean;
        /**
          * Message that should be displayed if an error occurs
         */
        "errorMessage": string;
        /**
          * Data that should be sent on Chat Widget initialization
         */
        "initialPayload": string;
        /**
          * Message placeholder for input
         */
        "inputMessagePlaceholder": string;
        /**
          * Indicates time between message is received and printed.
         */
        "messageDelay": number;
        /**
          * Format of the message timestamp
         */
        "messageTimestamp": string;
        /**
          * If set to True, instead of the default WebSocket communication, the widget will use the HTTP protocol.
         */
        "restEnabled": boolean;
        /**
          * ID of a user engaged with the Chat Widget
         */
        "senderId": string;
        /**
          * Url of the Rasa chatbot backend server (example: https://example.com)
         */
        "serverUrl": string;
        /**
          * If set to True, bot messages will be received as stream (printing word by word).
         */
        "streamMessages": boolean;
        /**
          * Indicates whether the chat messenger can be toggled to full screen mode.
         */
        "toggleFullScreen": boolean;
        /**
          * Static icon for the widget
         */
        "widgetIcon": string;
        /**
          * Title of the Chat Widget
         */
        "widgetTitle": string;
    }
    interface RasaFileDownloadMessage {
        /**
          * The file name for the downloaded file
         */
        "fileName": string;
        /**
          * URL of the file to download
         */
        "fileUrl": string;
        /**
          * Message text
         */
        "text": string;
    }
    interface RasaIconArrowsContract {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconArrowsExpand {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconChat {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconChevronDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconCloseChat {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconDanger {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconDefaultImageFallback {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconExternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconPaperPlane {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconPaperclip {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconRobot {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaImage {
        /**
          * Alt text for the image
         */
        "alt": string;
        /**
          * Image height
         */
        "height": number | string;
        /**
          * Image source
         */
        "src": string;
        /**
          * Image width
         */
        "width": number | string;
    }
    interface RasaImageMessage {
        /**
          * Image height
         */
        "height": number | string;
        /**
          * Alt text for the image
         */
        "imageAlt": string;
        /**
          * Image source
         */
        "imageSrc": string;
        /**
          * Is another component using it as child component
         */
        "isChild": boolean;
        /**
          * Message text
         */
        "text": string;
        /**
          * Image width
         */
        "width": number | string;
    }
    interface RasaLinkButton {
        /**
          * Is button selected as option
         */
        "isSelected": boolean;
        /**
          * Href value for the link button
         */
        "link": string;
    }
    interface RasaQuickReply {
        /**
          * Element key
         */
        "elementKey": number;
        /**
          * Is message form history
         */
        "isHistory": boolean;
        /**
          * Message value
         */
        "message": QuickReplyMessage;
        /**
          * Element unique id
         */
        "quickReplyId": string;
    }
    interface RasaRating {
        /**
          * Customizable message from Rasa (Previously thankYouMessage)
         */
        "message": string;
        /**
          * List of rating options from Rasa
         */
        "options": string | { value: string; payload: string }[];
        /**
          * Instructional text for the rating component
         */
        "text": string;
    }
    interface RasaSessionDivider {
        /**
          * Session start datetime
         */
        "sessionStartDate": Date;
    }
    interface RasaText {
        /**
          * Disables text parsing (renders text as is, not markdown)
         */
        "disableParsing": boolean;
        /**
          * Disables text stream rendering
         */
        "enableStream": boolean;
        /**
          * Should component notify messageQueueService at complete rendering
         */
        "notifyCompleteRendering": boolean;
        /**
          * Text value
         */
        "value": string;
    }
    interface RasaTextMessage {
        /**
          * Is message form history
         */
        "isHistory": boolean;
        /**
          * Who sent the message
         */
        "sender": SenderType;
        /**
          * Message value
         */
        "value": string;
    }
    interface RasaTypingIndicator {
    }
    interface RasaVideo {
        /**
          * Autoplay on load
         */
        "autoplay": boolean;
        /**
          * Video player controls
         */
        "disableControls": boolean;
        /**
          * Loop video
         */
        "loop": boolean;
        /**
          * Mute video
         */
        "mute": boolean;
        /**
          * Video source url
         */
        "src": string;
    }
}
export interface RasaButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRasaButtonElement;
}
export interface RasaCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRasaCarouselElement;
}
export interface RasaChatInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRasaChatInputElement;
}
export interface RasaChatbotWidgetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRasaChatbotWidgetElement;
}
export interface RasaFileDownloadMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRasaFileDownloadMessageElement;
}
export interface RasaQuickReplyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRasaQuickReplyElement;
}
export interface RasaRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRasaRatingElement;
}
export interface RasaTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRasaTextElement;
}
declare global {
    interface HTMLChatMessageElement extends Components.ChatMessage, HTMLStencilElement {
    }
    var HTMLChatMessageElement: {
        prototype: HTMLChatMessageElement;
        new (): HTMLChatMessageElement;
    };
    interface HTMLErrorToastElement extends Components.ErrorToast, HTMLStencilElement {
    }
    var HTMLErrorToastElement: {
        prototype: HTMLErrorToastElement;
        new (): HTMLErrorToastElement;
    };
    interface HTMLGlobalErrorHandlerElement extends Components.GlobalErrorHandler, HTMLStencilElement {
    }
    var HTMLGlobalErrorHandlerElement: {
        prototype: HTMLGlobalErrorHandlerElement;
        new (): HTMLGlobalErrorHandlerElement;
    };
    interface HTMLRasaAccordionElement extends Components.RasaAccordion, HTMLStencilElement {
    }
    var HTMLRasaAccordionElement: {
        prototype: HTMLRasaAccordionElement;
        new (): HTMLRasaAccordionElement;
    };
    interface HTMLRasaButtonElementEventMap {
        "buttonClickHandler": { value: string };
    }
    interface HTMLRasaButtonElement extends Components.RasaButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRasaButtonElementEventMap>(type: K, listener: (this: HTMLRasaButtonElement, ev: RasaButtonCustomEvent<HTMLRasaButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRasaButtonElementEventMap>(type: K, listener: (this: HTMLRasaButtonElement, ev: RasaButtonCustomEvent<HTMLRasaButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRasaButtonElement: {
        prototype: HTMLRasaButtonElement;
        new (): HTMLRasaButtonElement;
    };
    interface HTMLRasaCarouselElementEventMap {
        "linkClicked": undefined;
    }
    interface HTMLRasaCarouselElement extends Components.RasaCarousel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRasaCarouselElementEventMap>(type: K, listener: (this: HTMLRasaCarouselElement, ev: RasaCarouselCustomEvent<HTMLRasaCarouselElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRasaCarouselElementEventMap>(type: K, listener: (this: HTMLRasaCarouselElement, ev: RasaCarouselCustomEvent<HTMLRasaCarouselElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRasaCarouselElement: {
        prototype: HTMLRasaCarouselElement;
        new (): HTMLRasaCarouselElement;
    };
    interface HTMLRasaChatInputElementEventMap {
        "sendMessageHandler": string;
    }
    interface HTMLRasaChatInputElement extends Components.RasaChatInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRasaChatInputElementEventMap>(type: K, listener: (this: HTMLRasaChatInputElement, ev: RasaChatInputCustomEvent<HTMLRasaChatInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRasaChatInputElementEventMap>(type: K, listener: (this: HTMLRasaChatInputElement, ev: RasaChatInputCustomEvent<HTMLRasaChatInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRasaChatInputElement: {
        prototype: HTMLRasaChatInputElement;
        new (): HTMLRasaChatInputElement;
    };
    interface HTMLRasaChatbotWidgetElementEventMap {
        "chatSessionStarted": { sessionId: string };
        "chatWidgetReceivedMessage": unknown;
        "chatWidgetSentMessage": string;
        "chatWidgetQuickReply": string;
        "chatWidgetOpened": undefined;
        "chatWidgetClosed": undefined;
        "chatWidgetHyperlinkClicked": undefined;
        "chatWidgetFileStartedDownload": undefined;
    }
    interface HTMLRasaChatbotWidgetElement extends Components.RasaChatbotWidget, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRasaChatbotWidgetElementEventMap>(type: K, listener: (this: HTMLRasaChatbotWidgetElement, ev: RasaChatbotWidgetCustomEvent<HTMLRasaChatbotWidgetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRasaChatbotWidgetElementEventMap>(type: K, listener: (this: HTMLRasaChatbotWidgetElement, ev: RasaChatbotWidgetCustomEvent<HTMLRasaChatbotWidgetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRasaChatbotWidgetElement: {
        prototype: HTMLRasaChatbotWidgetElement;
        new (): HTMLRasaChatbotWidgetElement;
    };
    interface HTMLRasaFileDownloadMessageElementEventMap {
        "fileDownloadStarted": undefined;
    }
    interface HTMLRasaFileDownloadMessageElement extends Components.RasaFileDownloadMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRasaFileDownloadMessageElementEventMap>(type: K, listener: (this: HTMLRasaFileDownloadMessageElement, ev: RasaFileDownloadMessageCustomEvent<HTMLRasaFileDownloadMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRasaFileDownloadMessageElementEventMap>(type: K, listener: (this: HTMLRasaFileDownloadMessageElement, ev: RasaFileDownloadMessageCustomEvent<HTMLRasaFileDownloadMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRasaFileDownloadMessageElement: {
        prototype: HTMLRasaFileDownloadMessageElement;
        new (): HTMLRasaFileDownloadMessageElement;
    };
    interface HTMLRasaIconArrowsContractElement extends Components.RasaIconArrowsContract, HTMLStencilElement {
    }
    var HTMLRasaIconArrowsContractElement: {
        prototype: HTMLRasaIconArrowsContractElement;
        new (): HTMLRasaIconArrowsContractElement;
    };
    interface HTMLRasaIconArrowsExpandElement extends Components.RasaIconArrowsExpand, HTMLStencilElement {
    }
    var HTMLRasaIconArrowsExpandElement: {
        prototype: HTMLRasaIconArrowsExpandElement;
        new (): HTMLRasaIconArrowsExpandElement;
    };
    interface HTMLRasaIconChatElement extends Components.RasaIconChat, HTMLStencilElement {
    }
    var HTMLRasaIconChatElement: {
        prototype: HTMLRasaIconChatElement;
        new (): HTMLRasaIconChatElement;
    };
    interface HTMLRasaIconChevronDownElement extends Components.RasaIconChevronDown, HTMLStencilElement {
    }
    var HTMLRasaIconChevronDownElement: {
        prototype: HTMLRasaIconChevronDownElement;
        new (): HTMLRasaIconChevronDownElement;
    };
    interface HTMLRasaIconCloseChatElement extends Components.RasaIconCloseChat, HTMLStencilElement {
    }
    var HTMLRasaIconCloseChatElement: {
        prototype: HTMLRasaIconCloseChatElement;
        new (): HTMLRasaIconCloseChatElement;
    };
    interface HTMLRasaIconDangerElement extends Components.RasaIconDanger, HTMLStencilElement {
    }
    var HTMLRasaIconDangerElement: {
        prototype: HTMLRasaIconDangerElement;
        new (): HTMLRasaIconDangerElement;
    };
    interface HTMLRasaIconDefaultImageFallbackElement extends Components.RasaIconDefaultImageFallback, HTMLStencilElement {
    }
    var HTMLRasaIconDefaultImageFallbackElement: {
        prototype: HTMLRasaIconDefaultImageFallbackElement;
        new (): HTMLRasaIconDefaultImageFallbackElement;
    };
    interface HTMLRasaIconExternalLinkElement extends Components.RasaIconExternalLink, HTMLStencilElement {
    }
    var HTMLRasaIconExternalLinkElement: {
        prototype: HTMLRasaIconExternalLinkElement;
        new (): HTMLRasaIconExternalLinkElement;
    };
    interface HTMLRasaIconPaperPlaneElement extends Components.RasaIconPaperPlane, HTMLStencilElement {
    }
    var HTMLRasaIconPaperPlaneElement: {
        prototype: HTMLRasaIconPaperPlaneElement;
        new (): HTMLRasaIconPaperPlaneElement;
    };
    interface HTMLRasaIconPaperclipElement extends Components.RasaIconPaperclip, HTMLStencilElement {
    }
    var HTMLRasaIconPaperclipElement: {
        prototype: HTMLRasaIconPaperclipElement;
        new (): HTMLRasaIconPaperclipElement;
    };
    interface HTMLRasaIconRobotElement extends Components.RasaIconRobot, HTMLStencilElement {
    }
    var HTMLRasaIconRobotElement: {
        prototype: HTMLRasaIconRobotElement;
        new (): HTMLRasaIconRobotElement;
    };
    interface HTMLRasaImageElement extends Components.RasaImage, HTMLStencilElement {
    }
    var HTMLRasaImageElement: {
        prototype: HTMLRasaImageElement;
        new (): HTMLRasaImageElement;
    };
    interface HTMLRasaImageMessageElement extends Components.RasaImageMessage, HTMLStencilElement {
    }
    var HTMLRasaImageMessageElement: {
        prototype: HTMLRasaImageMessageElement;
        new (): HTMLRasaImageMessageElement;
    };
    interface HTMLRasaLinkButtonElement extends Components.RasaLinkButton, HTMLStencilElement {
    }
    var HTMLRasaLinkButtonElement: {
        prototype: HTMLRasaLinkButtonElement;
        new (): HTMLRasaLinkButtonElement;
    };
    interface HTMLRasaQuickReplyElementEventMap {
        "quickReplySelected": {
    quickReply: QuickReply;
    key: number;
  };
    }
    interface HTMLRasaQuickReplyElement extends Components.RasaQuickReply, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRasaQuickReplyElementEventMap>(type: K, listener: (this: HTMLRasaQuickReplyElement, ev: RasaQuickReplyCustomEvent<HTMLRasaQuickReplyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRasaQuickReplyElementEventMap>(type: K, listener: (this: HTMLRasaQuickReplyElement, ev: RasaQuickReplyCustomEvent<HTMLRasaQuickReplyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRasaQuickReplyElement: {
        prototype: HTMLRasaQuickReplyElement;
        new (): HTMLRasaQuickReplyElement;
    };
    interface HTMLRasaRatingElementEventMap {
        "ratingSelected": { value: string; payload: string };
    }
    interface HTMLRasaRatingElement extends Components.RasaRating, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRasaRatingElementEventMap>(type: K, listener: (this: HTMLRasaRatingElement, ev: RasaRatingCustomEvent<HTMLRasaRatingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRasaRatingElementEventMap>(type: K, listener: (this: HTMLRasaRatingElement, ev: RasaRatingCustomEvent<HTMLRasaRatingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRasaRatingElement: {
        prototype: HTMLRasaRatingElement;
        new (): HTMLRasaRatingElement;
    };
    interface HTMLRasaSessionDividerElement extends Components.RasaSessionDivider, HTMLStencilElement {
    }
    var HTMLRasaSessionDividerElement: {
        prototype: HTMLRasaSessionDividerElement;
        new (): HTMLRasaSessionDividerElement;
    };
    interface HTMLRasaTextElementEventMap {
        "linkClicked": undefined;
        "textStreamComplete": { value: true };
    }
    interface HTMLRasaTextElement extends Components.RasaText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRasaTextElementEventMap>(type: K, listener: (this: HTMLRasaTextElement, ev: RasaTextCustomEvent<HTMLRasaTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRasaTextElementEventMap>(type: K, listener: (this: HTMLRasaTextElement, ev: RasaTextCustomEvent<HTMLRasaTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRasaTextElement: {
        prototype: HTMLRasaTextElement;
        new (): HTMLRasaTextElement;
    };
    interface HTMLRasaTextMessageElement extends Components.RasaTextMessage, HTMLStencilElement {
    }
    var HTMLRasaTextMessageElement: {
        prototype: HTMLRasaTextMessageElement;
        new (): HTMLRasaTextMessageElement;
    };
    interface HTMLRasaTypingIndicatorElement extends Components.RasaTypingIndicator, HTMLStencilElement {
    }
    var HTMLRasaTypingIndicatorElement: {
        prototype: HTMLRasaTypingIndicatorElement;
        new (): HTMLRasaTypingIndicatorElement;
    };
    interface HTMLRasaVideoElement extends Components.RasaVideo, HTMLStencilElement {
    }
    var HTMLRasaVideoElement: {
        prototype: HTMLRasaVideoElement;
        new (): HTMLRasaVideoElement;
    };
    interface HTMLElementTagNameMap {
        "chat-message": HTMLChatMessageElement;
        "error-toast": HTMLErrorToastElement;
        "global-error-handler": HTMLGlobalErrorHandlerElement;
        "rasa-accordion": HTMLRasaAccordionElement;
        "rasa-button": HTMLRasaButtonElement;
        "rasa-carousel": HTMLRasaCarouselElement;
        "rasa-chat-input": HTMLRasaChatInputElement;
        "rasa-chatbot-widget": HTMLRasaChatbotWidgetElement;
        "rasa-file-download-message": HTMLRasaFileDownloadMessageElement;
        "rasa-icon-arrows-contract": HTMLRasaIconArrowsContractElement;
        "rasa-icon-arrows-expand": HTMLRasaIconArrowsExpandElement;
        "rasa-icon-chat": HTMLRasaIconChatElement;
        "rasa-icon-chevron-down": HTMLRasaIconChevronDownElement;
        "rasa-icon-close-chat": HTMLRasaIconCloseChatElement;
        "rasa-icon-danger": HTMLRasaIconDangerElement;
        "rasa-icon-default-image-fallback": HTMLRasaIconDefaultImageFallbackElement;
        "rasa-icon-external-link": HTMLRasaIconExternalLinkElement;
        "rasa-icon-paper-plane": HTMLRasaIconPaperPlaneElement;
        "rasa-icon-paperclip": HTMLRasaIconPaperclipElement;
        "rasa-icon-robot": HTMLRasaIconRobotElement;
        "rasa-image": HTMLRasaImageElement;
        "rasa-image-message": HTMLRasaImageMessageElement;
        "rasa-link-button": HTMLRasaLinkButtonElement;
        "rasa-quick-reply": HTMLRasaQuickReplyElement;
        "rasa-rating": HTMLRasaRatingElement;
        "rasa-session-divider": HTMLRasaSessionDividerElement;
        "rasa-text": HTMLRasaTextElement;
        "rasa-text-message": HTMLRasaTextMessageElement;
        "rasa-typing-indicator": HTMLRasaTypingIndicatorElement;
        "rasa-video": HTMLRasaVideoElement;
    }
}
declare namespace LocalJSX {
    interface ChatMessage {
        /**
          * Show sender icon
         */
        "hideSenderIcon"?: boolean;
        /**
          * Who sent the message
         */
        "sender"?: 'user' | 'bot';
        /**
          * Show message timestamp
         */
        "showTimestamp"?: boolean;
        /**
          * Message timestamp
         */
        "timestamp"?: Date;
    }
    interface ErrorToast {
    }
    interface GlobalErrorHandler {
    }
    interface RasaAccordion {
        /**
          * Represents the label property of an Accordion component. The label serves as the title or heading for accordion.
         */
        "label"?: string;
    }
    interface RasaButton {
        /**
          * Is button selected as option
         */
        "isSelected"?: boolean;
        /**
          * On button click event emitter
         */
        "onButtonClickHandler"?: (event: RasaButtonCustomEvent<{ value: string }>) => void;
        /**
          * Additional value that is passed at button click
         */
        "reply"?: string;
    }
    interface RasaCarousel {
        /**
          * List of carousel elements
         */
        "elements"?: CarouselElement[];
        /**
          * User clicked on link
         */
        "onLinkClicked"?: (event: RasaCarouselCustomEvent<undefined>) => void;
    }
    interface RasaChatInput {
        /**
          * Input value
         */
        "initialValue"?: string;
        /**
          * Send message event
         */
        "onSendMessageHandler"?: (event: RasaChatInputCustomEvent<string>) => void;
    }
    interface RasaChatbotWidget {
        /**
          * User authentication token
         */
        "authenticationToken"?: string;
        /**
          * If set to True, it will open the chat, triggering the 'initialPayload' immediately if set.
         */
        "autoOpen"?: boolean;
        /**
          * Static icon for the chatbot
         */
        "botIcon"?: string;
        /**
          * Indicates if a message timestamp should be displayed
         */
        "displayTimestamp"?: boolean;
        /**
          * Message that should be displayed if an error occurs
         */
        "errorMessage"?: string;
        /**
          * Data that should be sent on Chat Widget initialization
         */
        "initialPayload"?: string;
        /**
          * Message placeholder for input
         */
        "inputMessagePlaceholder"?: string;
        /**
          * Indicates time between message is received and printed.
         */
        "messageDelay"?: number;
        /**
          * Format of the message timestamp
         */
        "messageTimestamp"?: string;
        /**
          * Emitted when the Chat Widget is opened by the user
         */
        "onChatSessionStarted"?: (event: RasaChatbotWidgetCustomEvent<{ sessionId: string }>) => void;
        /**
          * Emitted when the Chat Widget is closed by the user
         */
        "onChatWidgetClosed"?: (event: RasaChatbotWidgetCustomEvent<undefined>) => void;
        /**
          * Emitted when a user is starting to download a file.
         */
        "onChatWidgetFileStartedDownload"?: (event: RasaChatbotWidgetCustomEvent<undefined>) => void;
        /**
          * Emitted when a user clicks on a hyperlink option.
         */
        "onChatWidgetHyperlinkClicked"?: (event: RasaChatbotWidgetCustomEvent<undefined>) => void;
        /**
          * Emitted when the Chat Widget is opened by the user
         */
        "onChatWidgetOpened"?: (event: RasaChatbotWidgetCustomEvent<undefined>) => void;
        /**
          * Emitted when the user click on quick reply
         */
        "onChatWidgetQuickReply"?: (event: RasaChatbotWidgetCustomEvent<string>) => void;
        /**
          * Emitted when the user receives a message
         */
        "onChatWidgetReceivedMessage"?: (event: RasaChatbotWidgetCustomEvent<unknown>) => void;
        /**
          * Emitted when the user sends a message
         */
        "onChatWidgetSentMessage"?: (event: RasaChatbotWidgetCustomEvent<string>) => void;
        /**
          * If set to True, instead of the default WebSocket communication, the widget will use the HTTP protocol.
         */
        "restEnabled"?: boolean;
        /**
          * ID of a user engaged with the Chat Widget
         */
        "senderId"?: string;
        /**
          * Url of the Rasa chatbot backend server (example: https://example.com)
         */
        "serverUrl": string;
        /**
          * If set to True, bot messages will be received as stream (printing word by word).
         */
        "streamMessages"?: boolean;
        /**
          * Indicates whether the chat messenger can be toggled to full screen mode.
         */
        "toggleFullScreen"?: boolean;
        /**
          * Static icon for the widget
         */
        "widgetIcon"?: string;
        /**
          * Title of the Chat Widget
         */
        "widgetTitle"?: string;
    }
    interface RasaFileDownloadMessage {
        /**
          * The file name for the downloaded file
         */
        "fileName"?: string;
        /**
          * URL of the file to download
         */
        "fileUrl"?: string;
        /**
          * User clicked on file download
         */
        "onFileDownloadStarted"?: (event: RasaFileDownloadMessageCustomEvent<undefined>) => void;
        /**
          * Message text
         */
        "text"?: string;
    }
    interface RasaIconArrowsContract {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconArrowsExpand {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconChat {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconChevronDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconCloseChat {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconDanger {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconDefaultImageFallback {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconExternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconPaperPlane {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconPaperclip {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaIconRobot {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface RasaImage {
        /**
          * Alt text for the image
         */
        "alt"?: string;
        /**
          * Image height
         */
        "height"?: number | string;
        /**
          * Image source
         */
        "src"?: string;
        /**
          * Image width
         */
        "width"?: number | string;
    }
    interface RasaImageMessage {
        /**
          * Image height
         */
        "height"?: number | string;
        /**
          * Alt text for the image
         */
        "imageAlt"?: string;
        /**
          * Image source
         */
        "imageSrc"?: string;
        /**
          * Is another component using it as child component
         */
        "isChild"?: boolean;
        /**
          * Message text
         */
        "text"?: string;
        /**
          * Image width
         */
        "width"?: number | string;
    }
    interface RasaLinkButton {
        /**
          * Is button selected as option
         */
        "isSelected"?: boolean;
        /**
          * Href value for the link button
         */
        "link"?: string;
    }
    interface RasaQuickReply {
        /**
          * Element key
         */
        "elementKey"?: number;
        /**
          * Is message form history
         */
        "isHistory"?: boolean;
        /**
          * Message value
         */
        "message"?: QuickReplyMessage;
        /**
          * Quick reply selected
         */
        "onQuickReplySelected"?: (event: RasaQuickReplyCustomEvent<{
    quickReply: QuickReply;
    key: number;
  }>) => void;
        /**
          * Element unique id
         */
        "quickReplyId"?: string;
    }
    interface RasaRating {
        /**
          * Customizable message from Rasa (Previously thankYouMessage)
         */
        "message"?: string;
        /**
          * Event emitted when a rating is selected
         */
        "onRatingSelected"?: (event: RasaRatingCustomEvent<{ value: string; payload: string }>) => void;
        /**
          * List of rating options from Rasa
         */
        "options"?: string | { value: string; payload: string }[];
        /**
          * Instructional text for the rating component
         */
        "text"?: string;
    }
    interface RasaSessionDivider {
        /**
          * Session start datetime
         */
        "sessionStartDate"?: Date;
    }
    interface RasaText {
        /**
          * Disables text parsing (renders text as is, not markdown)
         */
        "disableParsing"?: boolean;
        /**
          * Disables text stream rendering
         */
        "enableStream"?: boolean;
        /**
          * Should component notify messageQueueService at complete rendering
         */
        "notifyCompleteRendering"?: boolean;
        /**
          * User clicked on link
         */
        "onLinkClicked"?: (event: RasaTextCustomEvent<undefined>) => void;
        /**
          * Trigger on stream complete
         */
        "onTextStreamComplete"?: (event: RasaTextCustomEvent<{ value: true }>) => void;
        /**
          * Text value
         */
        "value"?: string;
    }
    interface RasaTextMessage {
        /**
          * Is message form history
         */
        "isHistory"?: boolean;
        /**
          * Who sent the message
         */
        "sender"?: SenderType;
        /**
          * Message value
         */
        "value"?: string;
    }
    interface RasaTypingIndicator {
    }
    interface RasaVideo {
        /**
          * Autoplay on load
         */
        "autoplay"?: boolean;
        /**
          * Video player controls
         */
        "disableControls"?: boolean;
        /**
          * Loop video
         */
        "loop"?: boolean;
        /**
          * Mute video
         */
        "mute"?: boolean;
        /**
          * Video source url
         */
        "src"?: string;
    }
    interface IntrinsicElements {
        "chat-message": ChatMessage;
        "error-toast": ErrorToast;
        "global-error-handler": GlobalErrorHandler;
        "rasa-accordion": RasaAccordion;
        "rasa-button": RasaButton;
        "rasa-carousel": RasaCarousel;
        "rasa-chat-input": RasaChatInput;
        "rasa-chatbot-widget": RasaChatbotWidget;
        "rasa-file-download-message": RasaFileDownloadMessage;
        "rasa-icon-arrows-contract": RasaIconArrowsContract;
        "rasa-icon-arrows-expand": RasaIconArrowsExpand;
        "rasa-icon-chat": RasaIconChat;
        "rasa-icon-chevron-down": RasaIconChevronDown;
        "rasa-icon-close-chat": RasaIconCloseChat;
        "rasa-icon-danger": RasaIconDanger;
        "rasa-icon-default-image-fallback": RasaIconDefaultImageFallback;
        "rasa-icon-external-link": RasaIconExternalLink;
        "rasa-icon-paper-plane": RasaIconPaperPlane;
        "rasa-icon-paperclip": RasaIconPaperclip;
        "rasa-icon-robot": RasaIconRobot;
        "rasa-image": RasaImage;
        "rasa-image-message": RasaImageMessage;
        "rasa-link-button": RasaLinkButton;
        "rasa-quick-reply": RasaQuickReply;
        "rasa-rating": RasaRating;
        "rasa-session-divider": RasaSessionDivider;
        "rasa-text": RasaText;
        "rasa-text-message": RasaTextMessage;
        "rasa-typing-indicator": RasaTypingIndicator;
        "rasa-video": RasaVideo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "chat-message": LocalJSX.ChatMessage & JSXBase.HTMLAttributes<HTMLChatMessageElement>;
            "error-toast": LocalJSX.ErrorToast & JSXBase.HTMLAttributes<HTMLErrorToastElement>;
            "global-error-handler": LocalJSX.GlobalErrorHandler & JSXBase.HTMLAttributes<HTMLGlobalErrorHandlerElement>;
            "rasa-accordion": LocalJSX.RasaAccordion & JSXBase.HTMLAttributes<HTMLRasaAccordionElement>;
            "rasa-button": LocalJSX.RasaButton & JSXBase.HTMLAttributes<HTMLRasaButtonElement>;
            "rasa-carousel": LocalJSX.RasaCarousel & JSXBase.HTMLAttributes<HTMLRasaCarouselElement>;
            "rasa-chat-input": LocalJSX.RasaChatInput & JSXBase.HTMLAttributes<HTMLRasaChatInputElement>;
            "rasa-chatbot-widget": LocalJSX.RasaChatbotWidget & JSXBase.HTMLAttributes<HTMLRasaChatbotWidgetElement>;
            "rasa-file-download-message": LocalJSX.RasaFileDownloadMessage & JSXBase.HTMLAttributes<HTMLRasaFileDownloadMessageElement>;
            "rasa-icon-arrows-contract": LocalJSX.RasaIconArrowsContract & JSXBase.HTMLAttributes<HTMLRasaIconArrowsContractElement>;
            "rasa-icon-arrows-expand": LocalJSX.RasaIconArrowsExpand & JSXBase.HTMLAttributes<HTMLRasaIconArrowsExpandElement>;
            "rasa-icon-chat": LocalJSX.RasaIconChat & JSXBase.HTMLAttributes<HTMLRasaIconChatElement>;
            "rasa-icon-chevron-down": LocalJSX.RasaIconChevronDown & JSXBase.HTMLAttributes<HTMLRasaIconChevronDownElement>;
            "rasa-icon-close-chat": LocalJSX.RasaIconCloseChat & JSXBase.HTMLAttributes<HTMLRasaIconCloseChatElement>;
            "rasa-icon-danger": LocalJSX.RasaIconDanger & JSXBase.HTMLAttributes<HTMLRasaIconDangerElement>;
            "rasa-icon-default-image-fallback": LocalJSX.RasaIconDefaultImageFallback & JSXBase.HTMLAttributes<HTMLRasaIconDefaultImageFallbackElement>;
            "rasa-icon-external-link": LocalJSX.RasaIconExternalLink & JSXBase.HTMLAttributes<HTMLRasaIconExternalLinkElement>;
            "rasa-icon-paper-plane": LocalJSX.RasaIconPaperPlane & JSXBase.HTMLAttributes<HTMLRasaIconPaperPlaneElement>;
            "rasa-icon-paperclip": LocalJSX.RasaIconPaperclip & JSXBase.HTMLAttributes<HTMLRasaIconPaperclipElement>;
            "rasa-icon-robot": LocalJSX.RasaIconRobot & JSXBase.HTMLAttributes<HTMLRasaIconRobotElement>;
            "rasa-image": LocalJSX.RasaImage & JSXBase.HTMLAttributes<HTMLRasaImageElement>;
            "rasa-image-message": LocalJSX.RasaImageMessage & JSXBase.HTMLAttributes<HTMLRasaImageMessageElement>;
            "rasa-link-button": LocalJSX.RasaLinkButton & JSXBase.HTMLAttributes<HTMLRasaLinkButtonElement>;
            "rasa-quick-reply": LocalJSX.RasaQuickReply & JSXBase.HTMLAttributes<HTMLRasaQuickReplyElement>;
            "rasa-rating": LocalJSX.RasaRating & JSXBase.HTMLAttributes<HTMLRasaRatingElement>;
            "rasa-session-divider": LocalJSX.RasaSessionDivider & JSXBase.HTMLAttributes<HTMLRasaSessionDividerElement>;
            "rasa-text": LocalJSX.RasaText & JSXBase.HTMLAttributes<HTMLRasaTextElement>;
            "rasa-text-message": LocalJSX.RasaTextMessage & JSXBase.HTMLAttributes<HTMLRasaTextMessageElement>;
            "rasa-typing-indicator": LocalJSX.RasaTypingIndicator & JSXBase.HTMLAttributes<HTMLRasaTypingIndicatorElement>;
            "rasa-video": LocalJSX.RasaVideo & JSXBase.HTMLAttributes<HTMLRasaVideoElement>;
        }
    }
}
